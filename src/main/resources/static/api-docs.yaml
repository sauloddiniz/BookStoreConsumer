openapi: 3.0.3
info:
  title: Projeto de Avaliação - API de Livros e Autores
  description: |-
    Esta API foi desenvolvida como parte de uma avaliação de desenvolvedor backend.
    O objetivo é permitir a criação, listagem, atualização e remoção de livros e autores, bem como o consumo dos dados em APIs externas.
    A segurança é garantida via JWT, e as APIs são documentadas usando Swagger.
  contact:
    email: sauloddiniz@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8081
tags:
  - name: author
    description: Endpoints para gerenciar autores
  - name: book
    description: Endpoints para gerenciar livros
paths:
  /authors:
    post:
      tags:
        - author
      operationId: createAuthor
      summary: Cria um novo autor
      description: Este endpoint cria um novo autor no banco de dados.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        201:
          description: Autor criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        400:
          description: Dados inválidos
        500:
          description: Erro interno no servidor
    get:
      tags:
        - author
      operationId: getAuthors
      summary: Lista todos os autores
      description: Retorna a lista de todos os autores cadastrados.
      responses:
        200:
          description: Lista de autores retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorResponse'
        500:
          description: Erro interno no servidor
  /authors/{id}:
    get:
      tags:
        - author
      operationId: getAuthorById
      summary: Retorna um autor pelo ID
      description: Este endpoint retorna os detalhes de um autor específico, incluindo os livros associados.
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do autor
          schema:
            type: integer
      responses:
        200:
          description: Autor retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorWithBooksResponse'
        404:
          description: Autor não encontrado
        500:
          description: Erro interno no servidor
    put:
      tags:
        - author
      operationId: updateAuthor
      summary: Atualiza os dados de um autor
      description: Este endpoint permite atualizar as informações de um autor existente.
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do autor
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        200:
          description: Autor atualizado com sucesso
        400:
          description: Dados inválidos
        404:
          description: Autor não encontrado
        500:
          description: Erro interno no servidor
    delete:
      tags:
        - author
      operationId: deleteAuthor
      summary: Remove um autor pelo ID
      description: Este endpoint remove o autor especificado e todos os seus livros relacionados.
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do autor
          schema:
            type: integer
      responses:
        204:
          description: Autor removido com sucesso
        404:
          description: Autor não encontrado
        500:
          description: Erro interno no servidor
  /books:
    post:
      tags:
        - book
      operationId: createBook
      summary: Cria um novo livro
      description: Este endpoint cria um novo livro no banco de dados.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        201:
          description: Livro criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        400:
          description: Dados inválidos
        500:
          description: Erro interno no servidor
    get:
      tags:
        - book
      operationId: getBooks
      summary: Lista todos os livros
      description: Retorna a lista de todos os livros cadastrados.
      responses:
        200:
          description: Lista de livros retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponse'
        500:
          description: Erro interno no servidor
  /books/{id}:
    get:
      tags:
        - book
      operationId: getBookById
      summary: Retorna um livro pelo ID
      description: Este endpoint retorna os detalhes de um livro específico, incluindo o autor associado.
      parameters:
        - name: id
          in: path
          required: true
          description: ID único do livro
          schema:
            type: integer
      responses:
        200:
          description: Livro retornado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookWithAuthorResponse'
        404:
          description: Livro não encontrado
        500:
          description: Erro interno no servidor
components:
  schemas:
    AuthorRequest:
      type: object
      properties:
        name:
          type: string
          description: Nome do autor
          example: "J.R.R. Tolkien"
      required:
        - name
    AuthorResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    AuthorWithBooksResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
    BookRequest:
      type: object
      properties:
        title:
          type: string
          description: Título do livro
          example: "O Hobbit"
        description:
          type: string
          description: Descrição do livro
          example: "Uma aventura épica de um hobbit chamado Bilbo Baggins"
        category:
          type: string
          description: Categoria do livro
          example: "Fantasia"
        authorId:
          type: integer
          description: ID do autor associado ao livro
      required:
        - title
        - description
        - category
        - authorId
    BookResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
    BookWithAuthorResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
        author:
          $ref: '#/components/schemas/AuthorResponse'
