openapi: 3.0.0
info:
  title: "API de Gestão de Autores e Livros"
  description: "Esta API consome dados de uma API externa (API 1) para fornecer endpoints que permitem listar, buscar, criar, atualizar e excluir informações de autores e seus livros. Também combina dados de autores e livros para facilitar o acesso integrado, com autenticação via JWT."
  version: 1.0.0

servers:
  - url: http://localhost:8081/bookstore-consumer-api
    description: API de Livros no ambiente local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthorRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome do autor
      required:
        - nome

    AuthorAndBookResponse:
      type: object
      properties:
        id:
          type: integer
          description: ID do autor
        name:
          type: string
          description: Nome do autor
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'

    BookRequest:
      type: object
      properties:
        titulo:
          type: string
          description: Título do livro
        descricao:
          type: string
          description: Descrição ou sinopse do livro
        categoria:
          type: string
          description: Categoria do livro
          enum:
            - ROMANCE
            - FICCAO
            - POESIA
            - BIOGRAFIA
            - DRAMA
      required:
        - titulo
        - descricao
        - categoria

    BookResponse:
      type: object
      properties:
        id:
          type: integer
          description: ID do livro
        title:
          type: string
          description: Título do livro
        description:
          type: string
          description: Descrição do livro
        category:
          type: string
          description: Categoria do livro
          enum:
            - ROMANCE
            - FICCAO
            - POESIA
            - BIOGRAFIA
            - DRAMA

security:
  - bearerAuth: []

paths:
  /authors:
    get:
      tags:
        - Autores
      summary: Lista todos os autores
      description: Retorna todos os autores cadastrados. Pode incluir livros associados, dependendo do parâmetro de consulta.
      security:
        - bearerAuth: []
      parameters:
        - name: books
          in: query
          description: Inclui livros associados aos autores (valor booleano)
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Lista de autores retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorAndBookResponse'
        '401':
          description: Token JWT ausente ou inválido.
        '500':
          description: Erro interno no servidor.

    post:
      tags:
        - Autores
      summary: Cria um novo autor
      description: Adiciona um novo autor no banco de dados.
      security:
        - bearerAuth: []
      requestBody:
        description: Objeto contendo informações do autor.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '201':
          description: Autor criado com sucesso.
        '400':
          description: Dados inválidos enviados.
        '401':
          description: Token JWT ausente ou inválido.
        '500':
          description: Erro interno no servidor.

  /authors/{id}:
    get:
      tags:
        - Autores
      summary: Busca um autor pelo ID
      description: Obtém as informações de um autor pelo ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do autor.
          schema:
            type: integer
      responses:
        '200':
          description: Autor retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorAndBookResponse'
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Autor não encontrado.
        '500':
          description: Erro interno no servidor.

    put:
      tags:
        - Autores
      summary: Atualiza os dados de um autor
      description: Modifica as informações de um autor existente.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do autor que será atualizado.
          schema:
            type: integer
      requestBody:
        description: Objeto contendo as informações atualizadas do autor.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '200':
          description: Autor atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorAndBookResponse'
        '400':
          description: Dados inválidos enviados.
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Autor não encontrado.
        '500':
          description: Erro interno no servidor.

    delete:
      tags:
        - Autores
      summary: Remove um autor
      description: Exclui um autor com base no ID informado.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID do autor a ser removido.
          schema:
            type: integer
      responses:
        '204':
          description: Autor removido com sucesso.
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Autor não encontrado.
        '500':
          description: Erro interno no servidor.

  /authors/{authorId}/books:
    get:
      tags:
        - Livros
      summary: Lista todos os livros de um autor
      description: Retorna todos os livros associados a um autor específico, com base no ID do autor.
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          required: true
          description: ID do autor para obter os livros.
          schema:
            type: integer
      responses:
        '200':
          description: Livros retornados com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorAndBookResponse'
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Autor não encontrado.
        '500':
          description: Erro interno no servidor.

    post:
      tags:
        - Livros
      summary: Cria um livro
      description: Associa um novo livro a um autor existente.
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          required: true
          description: ID do autor ao qual o livro será associado.
          schema:
            type: integer
      requestBody:
        description: Objeto contendo informações do livro.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '201':
          description: Livro criado com sucesso.
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Autor não encontrado.
        '500':
          description: Erro interno no servidor.

  /authors/{authorId}/books/{id}:
    get:
      tags:
        - Livros
      summary: Busca um livro
      description: Retorna os detalhes de um livro específico associado a um autor.
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          required: true
          description: ID do autor.
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: ID do livro.
          schema:
            type: integer
      responses:
        '200':
          description: Livro retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Livro não encontrado.
        '500':
          description: Erro interno no servidor.

    put:
      tags:
        - Livros
      summary: Atualiza um livro
      description: Atualiza as informações de um livro associado a um autor.
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          required: true
          description: ID do autor dono do livro.
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: ID do livro a ser atualizado.
          schema:
            type: integer
      requestBody:
        description: Objeto com os dados atualizados do livro.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Livro atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Livro ou autor não encontrado.
        '500':
          description: Erro interno no servidor.

    delete:
      tags:
        - Livros
      summary: Remove um livro
      description: Exclui um livro específico associado a um autor.
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          required: true
          description: ID do autor.
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: ID do livro.
          schema:
            type: integer
      responses:
        '204':
          description: Livro removido com sucesso.
        '401':
          description: Token JWT ausente ou inválido.
        '404':
          description: Livro ou autor não encontrado.
        '500':
          description: Erro interno no servidor.
